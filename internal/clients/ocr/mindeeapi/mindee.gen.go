// Package mindee provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package mindeeapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ErrorResponseApiRequestStatus.
const (
	Failure ErrorResponseApiRequestStatus = "failure"
)

// Defines values for MindeeExpenseReceipts5DocPredictionCategoryValue.
const (
	MindeeExpenseReceipts5DocPredictionCategoryValueAccommodation MindeeExpenseReceipts5DocPredictionCategoryValue = "accommodation"
	MindeeExpenseReceipts5DocPredictionCategoryValueFood          MindeeExpenseReceipts5DocPredictionCategoryValue = "food"
	MindeeExpenseReceipts5DocPredictionCategoryValueGasoline      MindeeExpenseReceipts5DocPredictionCategoryValue = "gasoline"
	MindeeExpenseReceipts5DocPredictionCategoryValueMiscellaneous MindeeExpenseReceipts5DocPredictionCategoryValue = "miscellaneous"
	MindeeExpenseReceipts5DocPredictionCategoryValueParking       MindeeExpenseReceipts5DocPredictionCategoryValue = "parking"
	MindeeExpenseReceipts5DocPredictionCategoryValueTelecom       MindeeExpenseReceipts5DocPredictionCategoryValue = "telecom"
	MindeeExpenseReceipts5DocPredictionCategoryValueToll          MindeeExpenseReceipts5DocPredictionCategoryValue = "toll"
	MindeeExpenseReceipts5DocPredictionCategoryValueTransport     MindeeExpenseReceipts5DocPredictionCategoryValue = "transport"
)

// Defines values for MindeeExpenseReceipts5DocPredictionDocumentTypeValue.
const (
	MindeeExpenseReceipts5DocPredictionDocumentTypeValueCreditCardReceipt MindeeExpenseReceipts5DocPredictionDocumentTypeValue = "credit_card_receipt"
	MindeeExpenseReceipts5DocPredictionDocumentTypeValueExpenseReceipt    MindeeExpenseReceipts5DocPredictionDocumentTypeValue = "expense_receipt"
)

// Defines values for MindeeExpenseReceipts5DocPredictionLocaleCurrency.
const (
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyAED MindeeExpenseReceipts5DocPredictionLocaleCurrency = "AED"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyARS MindeeExpenseReceipts5DocPredictionLocaleCurrency = "ARS"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyAUD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "AUD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyBRL MindeeExpenseReceipts5DocPredictionLocaleCurrency = "BRL"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCAD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "CAD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCHF MindeeExpenseReceipts5DocPredictionLocaleCurrency = "CHF"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCLP MindeeExpenseReceipts5DocPredictionLocaleCurrency = "CLP"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCNY MindeeExpenseReceipts5DocPredictionLocaleCurrency = "CNY"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCOP MindeeExpenseReceipts5DocPredictionLocaleCurrency = "COP"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyCZK MindeeExpenseReceipts5DocPredictionLocaleCurrency = "CZK"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyDKK MindeeExpenseReceipts5DocPredictionLocaleCurrency = "DKK"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyDZD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "DZD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyEUR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "EUR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyGBP MindeeExpenseReceipts5DocPredictionLocaleCurrency = "GBP"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyHKD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "HKD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyHUF MindeeExpenseReceipts5DocPredictionLocaleCurrency = "HUF"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyIDR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "IDR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyILS MindeeExpenseReceipts5DocPredictionLocaleCurrency = "ILS"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyINR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "INR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyJPY MindeeExpenseReceipts5DocPredictionLocaleCurrency = "JPY"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyKRW MindeeExpenseReceipts5DocPredictionLocaleCurrency = "KRW"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyMAD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "MAD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyMXN MindeeExpenseReceipts5DocPredictionLocaleCurrency = "MXN"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyMYR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "MYR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyNOK MindeeExpenseReceipts5DocPredictionLocaleCurrency = "NOK"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyNil MindeeExpenseReceipts5DocPredictionLocaleCurrency = "<nil>"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyOMR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "OMR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyPHP MindeeExpenseReceipts5DocPredictionLocaleCurrency = "PHP"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyPLN MindeeExpenseReceipts5DocPredictionLocaleCurrency = "PLN"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyQAR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "QAR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyRON MindeeExpenseReceipts5DocPredictionLocaleCurrency = "RON"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyRUB MindeeExpenseReceipts5DocPredictionLocaleCurrency = "RUB"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencySAR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "SAR"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencySEK MindeeExpenseReceipts5DocPredictionLocaleCurrency = "SEK"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencySGD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "SGD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyTHB MindeeExpenseReceipts5DocPredictionLocaleCurrency = "THB"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyTND MindeeExpenseReceipts5DocPredictionLocaleCurrency = "TND"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyTRY MindeeExpenseReceipts5DocPredictionLocaleCurrency = "TRY"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyTWD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "TWD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyUSD MindeeExpenseReceipts5DocPredictionLocaleCurrency = "USD"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyVND MindeeExpenseReceipts5DocPredictionLocaleCurrency = "VND"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyXAF MindeeExpenseReceipts5DocPredictionLocaleCurrency = "XAF"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyXOF MindeeExpenseReceipts5DocPredictionLocaleCurrency = "XOF"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyXPF MindeeExpenseReceipts5DocPredictionLocaleCurrency = "XPF"
	MindeeExpenseReceipts5DocPredictionLocaleCurrencyZAR MindeeExpenseReceipts5DocPredictionLocaleCurrency = "ZAR"
)

// Defines values for MindeeExpenseReceipts5DocPredictionSubcategoryValue.
const (
	MindeeExpenseReceipts5DocPredictionSubcategoryValuePlane      MindeeExpenseReceipts5DocPredictionSubcategoryValue = "plane"
	MindeeExpenseReceipts5DocPredictionSubcategoryValueRestaurant MindeeExpenseReceipts5DocPredictionSubcategoryValue = "restaurant"
	MindeeExpenseReceipts5DocPredictionSubcategoryValueShopping   MindeeExpenseReceipts5DocPredictionSubcategoryValue = "shopping"
	MindeeExpenseReceipts5DocPredictionSubcategoryValueTaxi       MindeeExpenseReceipts5DocPredictionSubcategoryValue = "taxi"
	MindeeExpenseReceipts5DocPredictionSubcategoryValueTrain      MindeeExpenseReceipts5DocPredictionSubcategoryValue = "train"
)

// Defines values for MindeeExpenseReceipts5PagePredictionCategoryValue.
const (
	MindeeExpenseReceipts5PagePredictionCategoryValueAccommodation MindeeExpenseReceipts5PagePredictionCategoryValue = "accommodation"
	MindeeExpenseReceipts5PagePredictionCategoryValueFood          MindeeExpenseReceipts5PagePredictionCategoryValue = "food"
	MindeeExpenseReceipts5PagePredictionCategoryValueGasoline      MindeeExpenseReceipts5PagePredictionCategoryValue = "gasoline"
	MindeeExpenseReceipts5PagePredictionCategoryValueMiscellaneous MindeeExpenseReceipts5PagePredictionCategoryValue = "miscellaneous"
	MindeeExpenseReceipts5PagePredictionCategoryValueParking       MindeeExpenseReceipts5PagePredictionCategoryValue = "parking"
	MindeeExpenseReceipts5PagePredictionCategoryValueTelecom       MindeeExpenseReceipts5PagePredictionCategoryValue = "telecom"
	MindeeExpenseReceipts5PagePredictionCategoryValueToll          MindeeExpenseReceipts5PagePredictionCategoryValue = "toll"
	MindeeExpenseReceipts5PagePredictionCategoryValueTransport     MindeeExpenseReceipts5PagePredictionCategoryValue = "transport"
)

// Defines values for MindeeExpenseReceipts5PagePredictionDocumentTypeValue.
const (
	MindeeExpenseReceipts5PagePredictionDocumentTypeValueCreditCardReceipt MindeeExpenseReceipts5PagePredictionDocumentTypeValue = "credit_card_receipt"
	MindeeExpenseReceipts5PagePredictionDocumentTypeValueExpenseReceipt    MindeeExpenseReceipts5PagePredictionDocumentTypeValue = "expense_receipt"
)

// Defines values for MindeeExpenseReceipts5PagePredictionLocaleCurrency.
const (
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyAED MindeeExpenseReceipts5PagePredictionLocaleCurrency = "AED"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyARS MindeeExpenseReceipts5PagePredictionLocaleCurrency = "ARS"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyAUD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "AUD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyBRL MindeeExpenseReceipts5PagePredictionLocaleCurrency = "BRL"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCAD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "CAD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCHF MindeeExpenseReceipts5PagePredictionLocaleCurrency = "CHF"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCLP MindeeExpenseReceipts5PagePredictionLocaleCurrency = "CLP"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCNY MindeeExpenseReceipts5PagePredictionLocaleCurrency = "CNY"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCOP MindeeExpenseReceipts5PagePredictionLocaleCurrency = "COP"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyCZK MindeeExpenseReceipts5PagePredictionLocaleCurrency = "CZK"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyDKK MindeeExpenseReceipts5PagePredictionLocaleCurrency = "DKK"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyDZD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "DZD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyEUR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "EUR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyGBP MindeeExpenseReceipts5PagePredictionLocaleCurrency = "GBP"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyHKD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "HKD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyHUF MindeeExpenseReceipts5PagePredictionLocaleCurrency = "HUF"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyIDR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "IDR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyILS MindeeExpenseReceipts5PagePredictionLocaleCurrency = "ILS"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyINR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "INR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyJPY MindeeExpenseReceipts5PagePredictionLocaleCurrency = "JPY"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyKRW MindeeExpenseReceipts5PagePredictionLocaleCurrency = "KRW"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyMAD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "MAD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyMXN MindeeExpenseReceipts5PagePredictionLocaleCurrency = "MXN"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyMYR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "MYR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyNOK MindeeExpenseReceipts5PagePredictionLocaleCurrency = "NOK"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyNil MindeeExpenseReceipts5PagePredictionLocaleCurrency = "<nil>"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyOMR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "OMR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyPHP MindeeExpenseReceipts5PagePredictionLocaleCurrency = "PHP"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyPLN MindeeExpenseReceipts5PagePredictionLocaleCurrency = "PLN"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyQAR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "QAR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyRON MindeeExpenseReceipts5PagePredictionLocaleCurrency = "RON"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyRUB MindeeExpenseReceipts5PagePredictionLocaleCurrency = "RUB"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencySAR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "SAR"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencySEK MindeeExpenseReceipts5PagePredictionLocaleCurrency = "SEK"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencySGD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "SGD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyTHB MindeeExpenseReceipts5PagePredictionLocaleCurrency = "THB"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyTND MindeeExpenseReceipts5PagePredictionLocaleCurrency = "TND"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyTRY MindeeExpenseReceipts5PagePredictionLocaleCurrency = "TRY"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyTWD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "TWD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyUSD MindeeExpenseReceipts5PagePredictionLocaleCurrency = "USD"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyVND MindeeExpenseReceipts5PagePredictionLocaleCurrency = "VND"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyXAF MindeeExpenseReceipts5PagePredictionLocaleCurrency = "XAF"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyXOF MindeeExpenseReceipts5PagePredictionLocaleCurrency = "XOF"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyXPF MindeeExpenseReceipts5PagePredictionLocaleCurrency = "XPF"
	MindeeExpenseReceipts5PagePredictionLocaleCurrencyZAR MindeeExpenseReceipts5PagePredictionLocaleCurrency = "ZAR"
)

// Defines values for MindeeExpenseReceipts5PagePredictionOrientationDegrees.
const (
	N0   MindeeExpenseReceipts5PagePredictionOrientationDegrees = 0
	N270 MindeeExpenseReceipts5PagePredictionOrientationDegrees = 270
	N90  MindeeExpenseReceipts5PagePredictionOrientationDegrees = 90
)

// Defines values for MindeeExpenseReceipts5PagePredictionSubcategoryValue.
const (
	MindeeExpenseReceipts5PagePredictionSubcategoryValuePlane      MindeeExpenseReceipts5PagePredictionSubcategoryValue = "plane"
	MindeeExpenseReceipts5PagePredictionSubcategoryValueRestaurant MindeeExpenseReceipts5PagePredictionSubcategoryValue = "restaurant"
	MindeeExpenseReceipts5PagePredictionSubcategoryValueShopping   MindeeExpenseReceipts5PagePredictionSubcategoryValue = "shopping"
	MindeeExpenseReceipts5PagePredictionSubcategoryValueTaxi       MindeeExpenseReceipts5PagePredictionSubcategoryValue = "taxi"
	MindeeExpenseReceipts5PagePredictionSubcategoryValueTrain      MindeeExpenseReceipts5PagePredictionSubcategoryValue = "train"
)

// Defines values for SuccessPredictResponseApiRequestStatus.
const (
	Success SuccessPredictResponseApiRequestStatus = "success"
)

// Defines values for PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion.
const (
	V5 PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion = "v5"
)

// Confidence Confidence score
type Confidence = float32

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ApiRequest Information about your API request
	ApiRequest *struct {
		Error *struct {
			// Code Error code
			Code *string `json:"code,omitempty"`

			// Details Detailed description of the error
			Details *string `json:"details,omitempty"`

			// Message Brief description of the error
			Message *string `json:"message,omitempty"`
		} `json:"error,omitempty"`
		Resources *[]string                      `json:"resources,omitempty"`
		Status    *ErrorResponseApiRequestStatus `json:"status,omitempty"`

		// StatusCode HTTP status code
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"api_request,omitempty"`
}

// ErrorResponseApiRequestStatus defines model for ErrorResponse.ApiRequest.Status.
type ErrorResponseApiRequestStatus string

// FormDataPredict defines model for FormDataPredict.
type FormDataPredict struct {
	Document openapi_types.File `json:"document"`
}

// JSONPredict defines model for JSONPredict.
type JSONPredict struct {
	// Document can be a base64 or a HTTPS URL
	Document string `json:"document"`
}

// MindeeExpenseReceipts5DocPrediction defines model for MindeeExpense_Receipts5DocPrediction.
type MindeeExpenseReceipts5DocPrediction struct {
	// Category The purchase category among predefined classes.
	Category *struct {
		// Confidence Confidence score
		Confidence *Confidence                                       `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5DocPredictionCategoryValue `json:"value,omitempty"`
	} `json:"category,omitempty"`

	// Date The date the purchase was made.
	Date *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value Date string in ISO format (YYYY-MM-DD).
		Value *openapi_types.Date `json:"value,omitempty"`
	} `json:"date,omitempty"`

	// DocumentType One of: 'CREDIT CARD RECEIPT', 'EXPENSE RECEIPT'.
	DocumentType *struct {
		// Confidence Confidence score
		Confidence *Confidence                                           `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5DocPredictionDocumentTypeValue `json:"value,omitempty"`
	} `json:"document_type,omitempty"`

	// LineItems List of line item details.
	LineItems *[]struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Description The item description.
		Description *string `json:"description,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Quantity The item quantity.
		Quantity *float32 `json:"quantity,omitempty"`

		// TotalAmount The item total amount.
		TotalAmount *float32 `json:"total_amount,omitempty"`

		// UnitPrice The item unit price.
		UnitPrice *float32 `json:"unit_price,omitempty"`
	} `json:"line_items,omitempty"`

	// Locale The locale detected on the document.
	Locale *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Country ISO 3166-1 alpha-2 code, works best with CA, CH, DE, ES, FR, GB, IT, NL, PT and US.
		Country *string `json:"country,omitempty"`

		// Currency The ISO 4217 code of the currency.
		Currency *MindeeExpenseReceipts5DocPredictionLocaleCurrency `json:"currency,omitempty"`

		// Language The ISO 639-1 code of the language.
		Language *string `json:"language,omitempty"`

		// Value The locale identifier in BCP 47 (RFC 5646) format: ISO language code, '-', ISO country code.
		Value *string `json:"value,omitempty"`
	} `json:"locale,omitempty"`

	// Subcategory The purchase subcategory among predefined classes for transport and food.
	Subcategory *struct {
		// Confidence Confidence score
		Confidence *Confidence                                          `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5DocPredictionSubcategoryValue `json:"value,omitempty"`
	} `json:"subcategory,omitempty"`

	// SupplierAddress The address of the supplier or merchant.
	SupplierAddress *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value The address as a single string.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_address,omitempty"`

	// SupplierCompanyRegistrations List of company registrations associated to the supplier.
	SupplierCompanyRegistrations *[]struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Type Generic: VAT NUMBER, TAX ID, COMPANY REGISTRATION NUMBER or country specific: TIN (United States), GST/HST (Canada), SIREN/SIRET (France), UEN (Singapore), STNR (Germany), KVK (NL), CIF (Spain), NIF (Portugal), CVR (Denmark), CF (Italy), DIC (Czech Republic), RFC (Mexico), GSTIN (India) ...etc.
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"supplier_company_registrations,omitempty"`

	// SupplierName The name of the supplier or merchant.
	SupplierName *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// RawValue Value as it appears on the document.
		RawValue *string `json:"raw_value,omitempty"`

		// Value Normalized value.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_name,omitempty"`

	// SupplierPhoneNumber The phone number of the supplier or merchant.
	SupplierPhoneNumber *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value The phone number as a single string.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_phone_number,omitempty"`

	// Taxes List of tax lines information.
	Taxes *[]struct {
		// Base The tax base.
		Base *float32 `json:"base,omitempty"`

		// Code The tax code.
		Code *string `json:"code,omitempty"`

		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Rate The tax rate percentage.
		Rate *float32 `json:"rate,omitempty"`

		// Value The tax amount.
		Value *float32 `json:"value,omitempty"`
	} `json:"taxes,omitempty"`

	// Time The time the purchase was made.
	Time *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value Time in 24 hours formatting (HH:MM).
		Value *string `json:"value,omitempty"`
	} `json:"time,omitempty"`

	// Tip The total amount of tip and gratuity.
	Tip *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"tip,omitempty"`

	// TotalAmount The total amount paid: includes taxes, discounts, fees, tips, and gratuity.
	TotalAmount *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_amount,omitempty"`

	// TotalNet The net amount paid: does not include taxes, fees, and discounts.
	TotalNet *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_net,omitempty"`

	// TotalTax The total amount of taxes.
	TotalTax *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// PageId The document page on which the information was found.
		PageId *PageId `json:"page_id,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_tax,omitempty"`
}

// MindeeExpenseReceipts5DocPredictionCategoryValue defines model for MindeeExpenseReceipts5DocPrediction.Category.Value.
type MindeeExpenseReceipts5DocPredictionCategoryValue string

// MindeeExpenseReceipts5DocPredictionDocumentTypeValue defines model for MindeeExpenseReceipts5DocPrediction.DocumentType.Value.
type MindeeExpenseReceipts5DocPredictionDocumentTypeValue string

// MindeeExpenseReceipts5DocPredictionLocaleCurrency The ISO 4217 code of the currency.
type MindeeExpenseReceipts5DocPredictionLocaleCurrency string

// MindeeExpenseReceipts5DocPredictionSubcategoryValue defines model for MindeeExpenseReceipts5DocPrediction.Subcategory.Value.
type MindeeExpenseReceipts5DocPredictionSubcategoryValue string

// MindeeExpenseReceipts5PagePrediction defines model for MindeeExpense_Receipts5PagePrediction.
type MindeeExpenseReceipts5PagePrediction struct {
	// Category The purchase category among predefined classes.
	Category *struct {
		// Confidence Confidence score
		Confidence *Confidence                                        `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5PagePredictionCategoryValue `json:"value,omitempty"`
	} `json:"category,omitempty"`

	// Date The date the purchase was made.
	Date *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value Date string in ISO format (YYYY-MM-DD).
		Value *openapi_types.Date `json:"value,omitempty"`
	} `json:"date,omitempty"`

	// DocumentType One of: 'CREDIT CARD RECEIPT', 'EXPENSE RECEIPT'.
	DocumentType *struct {
		// Confidence Confidence score
		Confidence *Confidence                                            `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5PagePredictionDocumentTypeValue `json:"value,omitempty"`
	} `json:"document_type,omitempty"`

	// LineItems List of line item details.
	LineItems *[]struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Description The item description.
		Description *string `json:"description,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Quantity The item quantity.
		Quantity *float32 `json:"quantity,omitempty"`

		// TotalAmount The item total amount.
		TotalAmount *float32 `json:"total_amount,omitempty"`

		// UnitPrice The item unit price.
		UnitPrice *float32 `json:"unit_price,omitempty"`
	} `json:"line_items,omitempty"`

	// Locale The locale detected on the document.
	Locale *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Country ISO 3166-1 alpha-2 code, works best with CA, CH, DE, ES, FR, GB, IT, NL, PT and US.
		Country *string `json:"country,omitempty"`

		// Currency The ISO 4217 code of the currency.
		Currency *MindeeExpenseReceipts5PagePredictionLocaleCurrency `json:"currency,omitempty"`

		// Language The ISO 639-1 code of the language.
		Language *string `json:"language,omitempty"`

		// Value The locale identifier in BCP 47 (RFC 5646) format: ISO language code, '-', ISO country code.
		Value *string `json:"value,omitempty"`
	} `json:"locale,omitempty"`

	// Orientation The clockwise rotation to apply (in degrees) to make the image upright.
	Orientation *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Degrees Degrees as an integer.
		Degrees *MindeeExpenseReceipts5PagePredictionOrientationDegrees `json:"degrees,omitempty"`
	} `json:"orientation,omitempty"`

	// Subcategory The purchase subcategory among predefined classes for transport and food.
	Subcategory *struct {
		// Confidence Confidence score
		Confidence *Confidence                                           `json:"confidence,omitempty"`
		Value      *MindeeExpenseReceipts5PagePredictionSubcategoryValue `json:"value,omitempty"`
	} `json:"subcategory,omitempty"`

	// SupplierAddress The address of the supplier or merchant.
	SupplierAddress *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value The address as a single string.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_address,omitempty"`

	// SupplierCompanyRegistrations List of company registrations associated to the supplier.
	SupplierCompanyRegistrations *[]struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Type Generic: VAT NUMBER, TAX ID, COMPANY REGISTRATION NUMBER or country specific: TIN (United States), GST/HST (Canada), SIREN/SIRET (France), UEN (Singapore), STNR (Germany), KVK (NL), CIF (Spain), NIF (Portugal), CVR (Denmark), CF (Italy), DIC (Czech Republic), RFC (Mexico), GSTIN (India) ...etc.
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"supplier_company_registrations,omitempty"`

	// SupplierName The name of the supplier or merchant.
	SupplierName *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// RawValue Value as it appears on the document.
		RawValue *string `json:"raw_value,omitempty"`

		// Value Normalized value.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_name,omitempty"`

	// SupplierPhoneNumber The phone number of the supplier or merchant.
	SupplierPhoneNumber *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value The phone number as a single string.
		Value *string `json:"value,omitempty"`
	} `json:"supplier_phone_number,omitempty"`

	// Taxes List of tax lines information.
	Taxes *[]struct {
		// Base The tax base.
		Base *float32 `json:"base,omitempty"`

		// Code The tax code.
		Code *string `json:"code,omitempty"`

		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Rate The tax rate percentage.
		Rate *float32 `json:"rate,omitempty"`

		// Value The tax amount.
		Value *float32 `json:"value,omitempty"`
	} `json:"taxes,omitempty"`

	// Time The time the purchase was made.
	Time *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`

		// Value Time in 24 hours formatting (HH:MM).
		Value *string `json:"value,omitempty"`
	} `json:"time,omitempty"`

	// Tip The total amount of tip and gratuity.
	Tip *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"tip,omitempty"`

	// TotalAmount The total amount paid: includes taxes, discounts, fees, tips, and gratuity.
	TotalAmount *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_amount,omitempty"`

	// TotalNet The net amount paid: does not include taxes, fees, and discounts.
	TotalNet *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_net,omitempty"`

	// TotalTax The total amount of taxes.
	TotalTax *struct {
		// Confidence Confidence score
		Confidence *Confidence `json:"confidence,omitempty"`

		// Polygon Polygon using a sequence of (X, Y) coordinates
		Polygon *Polygon `json:"polygon,omitempty"`
		Value   *float32 `json:"value,omitempty"`
	} `json:"total_tax,omitempty"`
}

// MindeeExpenseReceipts5PagePredictionCategoryValue defines model for MindeeExpenseReceipts5PagePrediction.Category.Value.
type MindeeExpenseReceipts5PagePredictionCategoryValue string

// MindeeExpenseReceipts5PagePredictionDocumentTypeValue defines model for MindeeExpenseReceipts5PagePrediction.DocumentType.Value.
type MindeeExpenseReceipts5PagePredictionDocumentTypeValue string

// MindeeExpenseReceipts5PagePredictionLocaleCurrency The ISO 4217 code of the currency.
type MindeeExpenseReceipts5PagePredictionLocaleCurrency string

// MindeeExpenseReceipts5PagePredictionOrientationDegrees Degrees as an integer.
type MindeeExpenseReceipts5PagePredictionOrientationDegrees int

// MindeeExpenseReceipts5PagePredictionSubcategoryValue defines model for MindeeExpenseReceipts5PagePrediction.Subcategory.Value.
type MindeeExpenseReceipts5PagePredictionSubcategoryValue string

// PageId The document page on which the information was found.
type PageId = int

// Point Point using (X, Y) coordinates
type Point = []float32

// Polygon Polygon using a sequence of (X, Y) coordinates
type Polygon = []Point

// SuccessPredictResponse defines model for SuccessPredictResponse.
type SuccessPredictResponse struct {
	// ApiRequest Information about your API request
	ApiRequest *struct {
		Error     *map[string]interface{}                 `json:"error,omitempty"`
		Resources *[]string                               `json:"resources,omitempty"`
		Status    *SuccessPredictResponseApiRequestStatus `json:"status,omitempty"`

		// StatusCode HTTP status code
		StatusCode *int    `json:"status_code,omitempty"`
		Url        *string `json:"url,omitempty"`
	} `json:"api_request,omitempty"`
	Document *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Id Document identifier, generated on each API call
		Id        *openapi_types.UUID `json:"id,omitempty"`
		Inference *struct {
			Extras     *map[string]interface{} `json:"extras,omitempty"`
			FinishedAt *string                 `json:"finished_at,omitempty"`
			Pages      *[]struct {
				Extras     *map[string]interface{}               `json:"extras,omitempty"`
				Id         *int                                  `json:"id,omitempty"`
				Prediction *MindeeExpenseReceipts5PagePrediction `json:"prediction,omitempty"`
			} `json:"pages,omitempty"`
			Prediction     *MindeeExpenseReceipts5DocPrediction `json:"prediction,omitempty"`
			ProcessingTime *float32                             `json:"processing_time,omitempty"`
			Product        *struct {
				Features *[]string `json:"features,omitempty"`
				Name     *string   `json:"name,omitempty"`
				Version  *string   `json:"version,omitempty"`
			} `json:"product,omitempty"`
			StartedAt *string `json:"started_at,omitempty"`
		} `json:"inference,omitempty"`

		// NPages Number of pages in the document
		NPages *int `json:"n_pages,omitempty"`

		// Name Name of the document
		Name *string                 `json:"name,omitempty"`
		Ocr  *map[string]interface{} `json:"ocr,omitempty"`
	} `json:"document,omitempty"`
}

// SuccessPredictResponseApiRequestStatus defines model for SuccessPredictResponse.ApiRequest.Status.
type SuccessPredictResponseApiRequestStatus string

// Error defines model for Error.
type Error = ErrorResponse

// OKDOCUMENT defines model for OK_DOCUMENT.
type OKDOCUMENT = SuccessPredictResponse

// Predict defines model for Predict.
type Predict = JSONPredict

// PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion defines parameters for PostProductsMindeeExpenseReceiptsVersionPredict.
type PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion string

// PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody defines body for PostProductsMindeeExpenseReceiptsVersionPredict for application/json ContentType.
type PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody = JSONPredict

// PostProductsMindeeExpenseReceiptsVersionPredictMultipartRequestBody defines body for PostProductsMindeeExpenseReceiptsVersionPredict for multipart/form-data ContentType.
type PostProductsMindeeExpenseReceiptsVersionPredictMultipartRequestBody = FormDataPredict

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostProductsMindeeExpenseReceiptsVersionPredictWithBody request with any body
	PostProductsMindeeExpenseReceiptsVersionPredictWithBody(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProductsMindeeExpenseReceiptsVersionPredict(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, body PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostProductsMindeeExpenseReceiptsVersionPredictWithBody(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsMindeeExpenseReceiptsVersionPredictRequestWithBody(c.Server, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsMindeeExpenseReceiptsVersionPredict(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, body PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsMindeeExpenseReceiptsVersionPredictRequest(c.Server, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostProductsMindeeExpenseReceiptsVersionPredictRequest calls the generic PostProductsMindeeExpenseReceiptsVersionPredict builder with application/json body
func NewPostProductsMindeeExpenseReceiptsVersionPredictRequest(server string, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, body PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsMindeeExpenseReceiptsVersionPredictRequestWithBody(server, version, "application/json", bodyReader)
}

// NewPostProductsMindeeExpenseReceiptsVersionPredictRequestWithBody generates requests for PostProductsMindeeExpenseReceiptsVersionPredict with any type of body
func NewPostProductsMindeeExpenseReceiptsVersionPredictRequestWithBody(server string, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/mindee/expense_receipts/%s/predict", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostProductsMindeeExpenseReceiptsVersionPredictWithBodyWithResponse request with any body
	PostProductsMindeeExpenseReceiptsVersionPredictWithBodyWithResponse(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsMindeeExpenseReceiptsVersionPredictResponse, error)

	PostProductsMindeeExpenseReceiptsVersionPredictWithResponse(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, body PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsMindeeExpenseReceiptsVersionPredictResponse, error)
}

type PostProductsMindeeExpenseReceiptsVersionPredictResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OKDOCUMENT
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON429      *Error
	JSON500      *Error
	JSON504      *Error
}

// Status returns HTTPResponse.Status
func (r PostProductsMindeeExpenseReceiptsVersionPredictResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsMindeeExpenseReceiptsVersionPredictResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostProductsMindeeExpenseReceiptsVersionPredictWithBodyWithResponse request with arbitrary body returning *PostProductsMindeeExpenseReceiptsVersionPredictResponse
func (c *ClientWithResponses) PostProductsMindeeExpenseReceiptsVersionPredictWithBodyWithResponse(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsMindeeExpenseReceiptsVersionPredictResponse, error) {
	rsp, err := c.PostProductsMindeeExpenseReceiptsVersionPredictWithBody(ctx, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsMindeeExpenseReceiptsVersionPredictResponse(rsp)
}

func (c *ClientWithResponses) PostProductsMindeeExpenseReceiptsVersionPredictWithResponse(ctx context.Context, version PostProductsMindeeExpenseReceiptsVersionPredictParamsVersion, body PostProductsMindeeExpenseReceiptsVersionPredictJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsMindeeExpenseReceiptsVersionPredictResponse, error) {
	rsp, err := c.PostProductsMindeeExpenseReceiptsVersionPredict(ctx, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsMindeeExpenseReceiptsVersionPredictResponse(rsp)
}

// ParsePostProductsMindeeExpenseReceiptsVersionPredictResponse parses an HTTP response from a PostProductsMindeeExpenseReceiptsVersionPredictWithResponse call
func ParsePostProductsMindeeExpenseReceiptsVersionPredictResponse(rsp *http.Response) (*PostProductsMindeeExpenseReceiptsVersionPredictResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsMindeeExpenseReceiptsVersionPredictResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OKDOCUMENT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 400:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 401:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 403:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 404:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 429:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 500:
	// Content-type (multipart/form-data) unsupported

	case rsp.StatusCode == 504:
		// Content-type (multipart/form-data) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
